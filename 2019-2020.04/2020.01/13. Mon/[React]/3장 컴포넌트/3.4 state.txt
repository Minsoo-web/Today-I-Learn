리액트에서 state란 컴포넌트 내부에서 바뀔 수 있는 값을 의미합니다. 
props는 컴포넌트가 사용되는 과정에서 부모 컴포넌트가 설정하는 값이며
컴포넌트 자신은 해당 props를 읽기 전용으로만 사용할 수 있습니다. 

props를 바꿔줄려면 부모 컴포넌트에서만 바꿔 줘야 합니다. 

state는 클래스 컴포넌트에서 사용하는 state와 
        함수형 컴포넌트에서 사용하는 useState라는 함수를 통해 사용하는 state가 있습니다. 

state 사용하기 (클래스)
1. 초기 값 설정 (생성자)

    constructor(props){
        super(props);
        this.state = {
            stateName : 초기값,
            stateName2 : 초기값 
        };
    }

1-1 state를 constructor에서 꺼내기 
    state = { 
        stateName : 초기값, 
        stateName2 : 초기값 
    }
    이렇게 해줘도 됌 


2. 조회하기 
    render() // 함수 안에서 조회
    {
        const {stateName} = this.state; 
    } // {}로 감싸주고 this.state로 조회합니다. 

3. 조회한 state 값 변경하기 
    this.setState({
        stateName : 변경하고 싶은 내용 
    })
    // this.setState()함수로 변경하면 되고 파라미터로는 객체가 들어오기때문에 
    this.setState({
        ... 이 형태가 고정적이라 생각해도 될듯 함 (내판단)
    })

3-1 this.setState()에 객체 대신 함수 인자 전달하기 
    this.setState를 사용하여 state 값을 업데이트 할 때는 상태가 비동기적으로 업데이트 됩니다. 
    어떤 함수 내부에서 this.setState를 두 번 호출한다면 어떻게 될까요?
    this.setState를 사용한다고 해서 state 값이 바로 바뀌는 것은 아니기 때문에 한 번만 바뀝니다. 
    이에 대한 해결책은 객체대신 함수를 인자로 전달하는 것입니다. 
    
    this.setState((prevState,props)=>{
        return {
            // 업데이트 
        }
    })
    
    여기서 prevState는 기존 상태이고 props는 현재 지니고 있는 props를 가리킵니다. 
    만약 업데이트 과정에서 props 가 필요 없다면 생략이 가능하고 함수 인자가 하나라면 소 괄호가 생략이 가능하므로 
    
    this.setState(prevState => {
        return{
            ...
        }
    })
    이런식으로 작성이 가능합니다. 

    이렇게 함수를 인자로 전달해서 업데이트를 해주면 this.setState를 동기식으로 처리할 수 있습니다. 

    this.setState 가 끝난 후 특정 작업 실행하기 
    setState를 사용하여 업데이트를 하고 난 다음에 특정 작업을 하고 싶을 때는 setState의 두번째 파라미터로 
    콜백함수를 등록하여 작업을 처리할 수 있습니다. 


함수형 컴포넌트에서 useState 사용하기 
    예제 
    import React , {useState} from 'react';

    const Say = () => {
        const [message, setMessage] = useState('');
        const onClickEnter = () => setMessage('안녕하세여');
        ...
    }
1.
useState 함수의 인자에는 상태의 초기값을 넣어줍니다. 
클래스형 컴포넌트에서 state 초기값은 객체 형태를 넣어 주어야 한다고 배웠는데요, 
useState에서는 반드시 객체가 아니여도 상관 없습니다. 

2. 
함수를 호출하면 배열이 반환되는데요,
 배열의 첫번째 원소는 현재 상태이고, 두번째 원소는 상태를 바꾸어 주는 함수입니다. 
 이 함수를 세터라고 부릅니다. 
그리고 배열의 비구조화 할당을 통해 이름을 자유롭게 정해줄 수 있습니다. 

3. 하나의 컴포넌트에서 useState여러번 사용하기 

const [ message , setMessage ] =useState('');
const [ color , setColor] = useState('black');

이런식으로 따로 여러번 선언하면 됩니다. 

