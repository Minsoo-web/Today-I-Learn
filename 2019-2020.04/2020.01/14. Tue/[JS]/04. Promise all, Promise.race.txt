function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

const getDog = async () => {
  await sleep(1000);
  return "멍멍이";
};
const getRabbit = async () => {
  await sleep(500);
  return "토끼";
};
const getTurtle = async () => {
  await sleep(3000);
  return "거북이";
};

async function process() {
  const dog = await getDog();
  console.log(dog);
  const rabbit = await getRabbit();
  console.log(rabbit);
  const turtle = await getTurtle();
  console.log(turtle);
}

process();

현재 위 코드에서는 
getDog 는 1초 
getRabbit은 0.5 초 
getTurtle은 3초가 걸리고 있습니다 
이 함수들을 process 함수에서 연달아 사용하게 되면서 
process 함수가 실행되는 시간은 총 4.5초가 걸리게 됩니다. 

동시에 작업을 시작하고 싶다면, 다음과 같이 Promise.all을 사용해야합니다. 

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

const getDog = async () => {
  await sleep(1000);
  return "멍멍이";
};
const getRabbit = async () => {
  await sleep(500);
  return "토끼";
};
const getTurtle = async () => {
  await sleep(3000);
  return "거북이";
};

async function process() {
  const [dog, rabbit, turtle] = await Promise.all([
    getDog(),
    getRabbit(),
    getTurtle()
  ]);
  console.log(dog);
  console.log(rabbit);
  console.log(turtle);
}

process();
*위 과정은 3초가 걸립니다. 

Promise.all을 사용할 때에는 등록한 프로미스 중 하나라도 실패하면 
모든게 실패한 것으로 간주합니다. 

이번에는 Promise.race 라는 것에 대해서 알아봅시다. 
이 함수는 Promise.all 과는 달리 여러개의 프로미스를 등록해서 실행했을 때 
가장 빨리 끝난 것 하나만의 결과 값을 가져옵니다. 
...

async function process() {
  const first = await Promise.race([
    getDog(),
    getRabbit(),
    getTurtle()
  ]);
  console.log(first);
}

process();
* 결과는 토끼이며 0.5 초가 걸린다. 

위 코드에서 토끼가 에러를 발생하는 것은 잡아낼 수 있지만 
개나 거북이에서 발생한 에러는 잡아낼 수 없습니다. 
