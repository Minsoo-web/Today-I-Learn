1. render 
   이 메서드는 컴포넌트 모양새를 정의합니다. 
   그렇기에 컴포넌트에서 가장 중요한 메서드라고 할 수 있죠. 라이프사이클 메서드중 유일한 필수 메서드이기도 합니다. 

   이 메서드 안에서 this.props 와 this.state에 접근할 수 있으며 리액트 요소를 반환합니다. 
   
   * 이 메서드 안에서는 이벤트 설정이 아닌 곳에서 setState를 사용해서는 안 되며 브라우저의 DOM에 접근해서도 안 됩니다 
   DOM 정보를 가져오거나 state에 변화를 줄 때는 componentDidMount에서 처리해야 합니다. 

2. constructor 메서드 
   컴포넌트의 생성자 메서드로 컴포넌트를 만들 때 처음으로 실행됩니다. 
   이 메서드에서는 초기 state를 정할 수 있습니다. 

3. getDerivedStateFromProps 메서드 
   이것은 리액트 v16.3 이후에 새로 만든 라이프사이클 메서드입니다.
   props로 받아온 값을 state에 동기화 시키는 용도로 사용하며,
   컴포넌트가 마운트될 때와 업데이트 될 때 사용합니다. 

    static getDerivedStateFromProps(nextProps, prevState){
        if(nextProps.value !== prevState.value){ // 조건에 따라 특정 값 동기화
            return {value : nextProps.vlaue};
        }
        return null;
    }

4. componentDidMount 메서드 
   이것은 컴포넌트를 만들고, 첫 렌더링을 마친 후 실행합니다. 
   이 안에서 다른 자바스크립트 라이브러리 또는 프레임 워크 함수를 호출하거나 이벤트 등록, setTimeout, setInterval, 네트워크 요청 같은 걸 하시면 됩니다. 

5. shouldComponentUpdate 메서드 
   이것은 props 또는 state를 변경 했을 때 리렌더링을 시작할지 여부를 지정하는 메서드입니다. 
   이 메서드에서는 반드시 true 값 또는 false 값을 반환해야 합니다.
   컴포넌트를 만들 때 이 메서드를 따로 생성하지 않으면 기본적으로 언제나 true 값을 반환합니다. 이 메서드가 false 값을 반환한다면 업데이트 과정은 여기서 중지됩니다. 

   이 메서드 안 에서 현재 props와 state는 this.props와 this.state로 접근하고 새로 생성될 props 또는 state는 
   nextProps와 nextState로 접근할 수 있습니다. 

6. getSnapshotBeforeUpdate 메서드 
   이것은 리액트 v16.3 이후 만든 메서드입니다. 
   이 메서드는 render에서 만들어진 결과물이 브라우저에 실제로 반영되기 직전에 호출됩니다. 
   이 메서드에서 반환하는 값은 componentDidUpdate에서 세번째 파라미터인 snapshot 값으로 전달 받을 수 있는데요 
   주로 업데이트하기 직전의 값을 참고할 일이 있을 때 활용합니다. (예 : 스크롤 바 위치)
    getSnapshotBeforeUpdate(prevProps, prevState){
        if(prevState.array !== this.state.array){
            const {scrollTop, scrollHeight} = this.list
            return {scrollTop, scrollHeight};
        }
    }

7. componentDidUpdate 메서드 
   componentDidUpdate(prevProps,prevState,snapshot){...}

   이 메서드는 렌더링을 완료한 후 실행합니다. 
   업데이트가 끝난 직후이므로 DOM 관련 처리를 해도 무방합니다. 여기서는 prevProps 또는 prevState를 사용하여 
   컴포넌트가 이전에 가졌던 데이터에 접근할 수 있습니다. 또 getSnapshotBeforeUpdate에서 반환한 값이 있다면 여기서 snapshot을 전달받을 수 있습니다. 


8. componentWillUnMount 메서드 
   이것은 컴포넌트를 DOM에서 제거할 때 실행합니다. 
   componentDidMount에서 등록한 이벤트, 타이머, 직접 생산한 DOM이 있다면 여기서 제거해야합니다. 

9. componentDidCatch 메서드 
   컴포넌트 렌더링 도중에 에러가 발생했을 때 앱이 먹통이 되지 않고 오류 UI를 보여줄 수 있게 해줍니다.

   사용 방법은 다음과 같습니다. 

   componentDidCatch(error,info){
       this.setState({
           error : true
       });
       console.log({error,info});
   }

   여기서 error 는 파라미터에 어떤 에러가 발생했는지 알려 주며, 
   info파라미터는 어디에 있는 코드에서 오류가 발생했는지에 대한 정보를 줍니다. 
   앞의 예제에서는 console.log만 했지만, 나중에 실제로 사용할 때 오류가 발생하면 서버 API를 호출하여 따로 수집할 수도 있습니다. 
   
   그러나 이 메서드를 사용할 때는 컴포넌트 자신에게 발생하는 에러는 잡을 수 없고 자신의 this.props.children으로 전달되는 컴포넌트에서 발생하는 에러만 잡아낼 수 있다는 점을 알아두어야 합니다. 

   