00. react - LifeCycle API 

    컴포넌트가 여러분의 브라우저에서 나타날때, 사라질 때, 그리고 업데이트 될 때
    호출되는 API입니다. 

01. 컴포넌트 초기 생성 
    
    일단, 컴포넌트가 브라우저에 나타나기 전, 후에 호출되는 API들이 있습니다 

    <constructor>
    컴포넌트 생성자 함수 -> 컴포넌트가 새로 만들어질 때마다 이 함수가 호출됩니다. 

        constructor(props){
            super(props);
        }

        /*componentWillMount
        이 API는 컨포넌트가 여러분의 화면에 나타나기 직전에 호출되는 API인데요,
        이 API에 대해선 별로 신경쓰지 않아도 됩니다. 원래는 주로 브라우저가 아닌 환경에서(서버사이드)도 호출
        하는 용도로 사용했었는데, 이 API가 더 이상 필요하지 않게 되었습니다.*/

    <ComponentDidMount> 
    이 API는 여러분의 컴포넌트가 화면에 나타나게 됐을 때 호출됩니다. 여기선 주로 D3, masonry처럼
    DOM을 사용해야하는 외부 라이브러리 연동을 하거나, 해당 컨포넌트에서 필요로 하는 데이터를 요청하기 위해
    axios, fetch등을 통하여 ajax 요청을 하거나, DOM의 속성을 읽거나 직접 변경하는 작업을 진행합니다. 

        ComponentDidMount(){
            // 외부 라이브러리 연동 : D3, masonry, etc
            // 컴포넌트에서 필요한 데이터 요청 : Ajax, GraphQL, etc
            // DOM에 관련된 작업 : 스크롤 설정, 크기 읽어오기 등 
        }

    
02. 컴포넌트 업데이트 

    컴포넌트의 업데이트는 props의 변화, 그리고 state의 변화에 따라 결정됩니다. 
    업데이트가 되기 전과 그리고 된 후에 어떠한 API가 호출 되는지 알아보겠습니다. 

       /*<componentWillReceiveProps>
        이 API는 컨포넌트가 새로운 props를 받게 되었을 때 호출됩니다. 
        이 안에서는 주로 state가 props에 따라 변해야 하는 로직을 작성합니다. 
        새로 받게될 props는 nextProps로 조회 할 수 있으며, 이 때 this.props를 조회하면
        업데이트 되기 전의 API이니 참고하세요.
        이 API 또한 v16.3 부터 사라졌다.*/

    02-01) static getDerivedStateFromProps()

    이 함수는 v16.3 이후에 만들어진 라이프사이클 API인데요, 이 API는 props로 받아온 
    값을 state로 동기화 하는 작업을 해줘야 하는 경우에 사용됩니다. 

        static getDerivedStateFromProps(nextProps, prevState){
            // 여기서는 setState를 하는 것이 아니라 
            // 특정 props가 바뀔 때 설정하고 설정하고 싶은 state 값을 리턴하는 형태로 사용됩니다.
           
            /*
            if (nextProps.value !== prevState.value){
                return { value : nextProps.value};
            }
            return null;
            */

            // null 을 리턴하면 따로 업데이트 할 것은 없다라는 의미 
        }

    02-02) shouldComponentUpdate 

    이 API는 컨포넌트를 최적화하는 작업에서 매우 유용하게 사용됩니다. 우리가 저번에 배웠을 때,
    리액트에서는 변화가 발생하는 부분만 업데이트를 해줘서 성능이 꽤 잘 나온다고 했었지요? 
    하지만, 변화가 발생한 부분만 감지해내기 위해서는 virtual DOM에 한 번 그려줘야 합니다. 

    즉, 현재 컴포넌트의 상태가 업데이트되지 않아도, 부모 컴포넌트가 리렌더링되면, 자식 컴포넌트들도 
    렌더링 됩니다. 여기서 "렌더링"된다는 건, render()함수가 호출된다는 의미입니다. 

    변화가 없으면 물론 DOM 조작은 하지 않게 됩니다. 그저 Virtual DOM에만 렌더링 할 뿐이죠.
    이 작업은 그렇게 부하가 많은 작업은 아니지만, 컴포넌트가 무수히 많이 렌더링된다면 얘기가 조금 달라집니다.
    CPU 자원을 어느정도 사용하고 있는 것은 사실이니까요. 

    쓸데없이 낭비되고 있는 이 CPU 처리량을 줄여주기 위해서 우리는 Virtual DOM에 리 랜더링 하는 것도, 
    불필요할 경우엔 방지하기 위해서 shouldComponentUpdate를 작성합니다. 

    이 함수는 기본적으로 true를 반환합니다. 
    우리가 따로 작성을 해주어서 조건에 따라 false 값을 반환하면 해당 조건에는 render 함수를 호출하지 않습니다. 

        shouldComponentUpdate(nextProps, nextState){
            // return false 하면 업데이트를 안 함 
            // return this.props.checked !== nextProps.checked
            return true;
        }

        /*componentWillUpdate 

        이 API는 shouldComponentUpdate 에서 true를 반환했을 때만 호출 됩니다. 
        만약에 false를 반환했다면, 이 함수는 호출되지 않습니다. 
        여기서 주로 애니메이션 효과를 초기화하거나, 이벤트 리스너를 없애는 작업을 합니다. 
        이 함수가 호출되고난 다음에는, render()가 호출됩니다. 
        이 API 또한 v16.3 이후 사라집니다*/

    02-03) getSnapshotBeforeUpdate()

    이 API가 발생하는 시점은 다음과 같습니다. 

        1. render()
        2. getSnapshotBeforeUpdate()
        3. 실제 DOM에 변화 발생
        4. componentDidUpdate

    이 API를 통해서, DOM 변화가 일어나기 직전의 DOM 상태를 가져오고, 여기서 리턴하는 값은 
    componentDidUpdate 에서 3번째 파라미터로 받아올 수 있게 됩니다. 
    