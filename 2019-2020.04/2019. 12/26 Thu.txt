<Js> 
01. 클로저에 대해 배웠다. 
    클로저의 첫인상은 외부함수 안에서 정의된 내부함수였는데
    실상은 외부에서 Private 변수에 접근할 수 없게 해주는 방법론(?) 같은 느낌이다.
    C++에서 별 생각없이 넘어갔었던 Class안에서 선언된 Private/ Public이 이해에 도움을 주었다.

    클로저란? 
    클로저는 독립적인(자유)변수를 가리키는 함수이다. 클로저 안에 정의된 함수는 만들어진 환경을 기억한다.
    
    왜?
    클로저는 Private한 변수들을 관리할 때 사용한다.
    즉, 외부에서 쉽게 접근할 수 없는 변수를 설정할 때 클로저 함수를 사용하면 된다.
    

01  -01
    클로저에 관한 블로그를 뒤지면서 공부하던 중 https://hyunseob.github.io/2016/08/30/javascript-closure/
    이 블로거를 알게 되었는데 포스팅 실력도 대단하시구 무엇보다 이력서 작성해 놓으신거랑 "탁월한 프론트엔드 엔지니어가
    되는 법" 이라는 글도 너무 감명 깊게 보았다.
    '여기에 이 코드를 왜 쓴 건가요?'
    '여기에 이 코드는 반드시 필요한 속성인가요?' 스스로에게 계속 질문하며 공부하라는 게 인상 깊었고
    새로운 것을 만들려고 하기보단 원래 있는 것을 유지보수하는 공부를 해야겠다는 생각이 들었다. 

02. 클로저를 배우다가 IIFE를 배웠다.
    웹개발을 공부하다 보면 생판 처음 보는 약어들이 자주 등장하는데 IIFE를 보는 순간
    또 모르는 거 나왔다 싶은 생각이 들었지만, 조금만 찾아보니 함수파트에서 배웠던 친구고 
    그렇게 복잡한 친구가 아니였다. 

03. 다시 클로저 공부로 돌아와 마무리하다가 setTimeout이 등장했다. 
    뭔가 예약 시스템 같은 첫인상이 재밌었는데 제대로 공부해보니 친구가 하나 더 있었다.
    그래서 정확히는 
    
04. scheduling에 대해 배웠다. 
    (사실 스케쥴링 스펠링도 배웠다.)
    c++ 공부할 때는 이런 시간과 관계된 메서드를 배우질 못했었는데
    조금 신세계였다. 뭔가 알람을 설정해 놓는 듯한 인상을 받았지만 
    공부를 하면 할 수록 그리 간단하게 훑고 넘어갈 문제가 아니란 걸 알았고
    비동기식 처리 방법 
    splittig을 통한 cpu소비 분할 등
    개발자라면 꼭 알고 있어야 할 메서드였다.

05. 함수 선언과 함수 표현 
    얼마 전 자바스크립트 개발자 예상 면접 질문들을 정리하던 중 
    function foo(){}와
    var foo = function(){}에서
    foo의 차이는 무엇인가요? 라는 질문을 본 적이 있는데
    처음 내 대답은 '함수 이름과 변수 이름 입니다.' 였다.
    하지만 다른 더 정확한 대답이 있었다. 
    
    function foo(){}는 함수의 선언(function declaration)이다.
    함수 선언은 function statement라고도 하며 말 그대로 함수 문장이란 뜻이다. 
    이는 곧 실행 가능한 코드 블럭이 아니며 함수의 정의를 나타내는 문장으로 해석되며
    따라서 코드해석에 따른 수행결과가 존재하지 않는다는 것을 의미한다. 
     : foo는 함수 문장

    var foo = function(){}은 함수 표현(Function Expression)이다. 
    함수 표현은 function literal이다. 이는 실행 가능한 코드로 해석되어지거나 변수나 데이터 구조에
    (여기서는 =연산자에 의해)할당되어지고 있음을 의미한다.
    즉 해당 코드 블럭이 실행 코드로서 해석되어지며 동시에 코드 실행에 따른 결과 값을 가지거나 
    특정 변수에 할당된 값으로 존재한다. 
     : foo는 코드 실행에 따른 결과 값을 갖는 변수

    <!--오늘의 공부를 마치며-->
    오늘은 javascript 진도를 나가는 느낌보단 클로저에서 시작해서 하나하나 생기는 의문점을 해결하다가 
    하루가 다 갔다. 프론트엔드 개발을 공부하면서 느끼는 점은 소프트웨어의 이 방대한 영역에 어떻게 비전공자분들이
    자습으로 이해하며 공부를 하셨을까 하는 생각이 든다. 
    
    뭔가를 배우면 생기는 또다른 모르는 거 그 모르는 걸 해결하면 떠오르는 또 모르는 거 새로 배우는 모르는 거는 
    이해도 안 될때가 있다. 

    원래 공부하는 걸 좋아하는 성격은 아니지만 모르는 분야를 공부하는 건 굉장히 좋아한다. 
    소프트웨어는 내게 굉장히 낯선 분야였고 배우면 배울 수록 튀어나오는 모르는 분야들 투성이인 내가 좋아하는 일이 된 것 같다.
    





