01. react 
    component는 HTML을 반환하는 함수

    
    react application은 한 번에 하나의 component만 rendering할 수 있다.

    구성>
    public 폴더 
        index.html이 있고 이 곳을 virtual DOM이라고 하는듯 비어있는 HTML이다 
    
    src 폴더 
        1. index.js 파일 
           ReactDOM에 rendering할 component를 알려주는 js 파일

        2. component 파일 (js파일)
           구성 요소라고 해석해도 좋을 듯 
           virtual DOM에 푸쉬할 컴포넌트들을 작성할 js 파일 


02. import React, {compoent} from 'react;
    // 이건 클래스 형태
    import React from 'react';
    // 이건 함수 형

    import 한다는 것은 무엇을 불러온다는 것입니다. 
    첫번째 코드는 리액트와 그 내부의 Componen를 불러옵니다.
    파일에서 JSX를 사용하려면 꼭 React를 import 해주어야합니다. 

    클래스형태로 만들어진 컴포넌트에는 꼭, render() 함수가 있어야 하구요,
    그리고 그 내부에는 JSX를 return 해주어야 합니다. 

    그리고 브라우저 상에 우리의 리액트 컴포넌트를 보여주기 위해서는 
    ReactDOM.render 함수를 사용합니다.
     첫번째 파라미터는 렌더링 할 결과물이고,
     두번째 파라미터는 컴포넌트를 어떤 DOM에 그릴지 정해줍니다. 

    JSX에는 지켜져야 할 몇가지 문법들이 있습니다. 
    01. 꼭 닫혀야 하는 태그 
        태그는 꼭 닫혀있어야 합니다. <br> 같은 태그들도 꼭 <br/> 이런식으로 닫아주어야 합니다.
    
    02. 감싸져 있는 엘리먼트
        두개 이상의 엘리먼트는 무조건 하나의 엘리먼트로 감싸져있어야 합니다.
        div로 묶어주기 싫다면 Fragment라는 태그로 감싸주면 해결된다. ({component, Fragment} 이렇게도 써주어야 함)

    03. 자바스크립트 값 사용하기 
        class App extends Component {
            render(){
                const name ='react';
                return (
                    <div>
                        hello {name}!    // 중괄호로 써주면 된다.
                    </div>
                );
            }
        }

        export default App;

    04. 조건부 렌더링 

        04-01) 삼항식 (조건부 삼항 연산자)
               조건부 삼항 연산자는 JavaScript에서 세 개의 피연산자를 취할 수 있는
               유일한 연산자입니다. 보통 if 명령문의 단축 형태로 쓰입니다.

               구문
               condition ? 참일때 : 거짓일때 

               반환값
               참일 때 : 참일때 
               거짓일 때 : 거짓일때
               --> 반환 값을 변수에 할당할 수 있다. 

               또한 다중 삼항 평가도 가능하다 --> 조건 연산은 오른쪽부터 
               e.g 

               let firstCheck = false;
                   secondCheck = false;
                   access = firstCheck ? "Access denied" : secondCheck ? "Access denied" : "Access granted";

               --> 정리
               삼항 연산자는 복잡한 if-else 구문을 간단하고 보기 쉬운 코드로 만들어준다. 

        JSX 내부에서 조건부 렌더링을 할 때는 보통 삼항 연산자를 사용하거나, AND 연산자를 사용합니다
        반면에 if문은 사용할 수 없으며 사용할려면 IIFE를 사용해야 합니다.

    05. style과 ClassName 
    JSX에서 style과 CSS 클래스를 설정할 때, html에서 하는 것과 사뭇 다릅니다. 

    html 태그 안에서 적었던 inline 방식으로 적을 때에는 
    render(){

    const style = {
        backgroundColor : 'black',
        padding : '16px';
    }

    return <div style={style}> 안녕하세요! </div>;

    } 이런식으로 적을 수 있고 
    주의할 점은 -을 없애고 붙여서 카밀케이스로 적어주어야 한다.

    .css 파일에서는 원래 적던 방식대로 그대로하면 된다. 

    06. 주석달기 

    {/*멀티라인 주석은 
    이런식으로 달면 됩니다*/}
    <h1 
    //태그안에서 주석을 달때에는 이렇게 달면 됩니다. 
    >

03. props 와 state 
    리액트 컴포넌트에서 다루는 데이터는 두 개로 나뉩니다. 
    props는 부모 컨퍼넌트가 자식 컨퍼넌트에게 주는 값이며 자식 컨퍼넌트는 props를 받아오기만하고 수정 할 수는 없다.
    state는 컨퍼넌트 내부에서 선언하며 내부에서 값을 변경 할 수 있다. 

    e.g
    class Myname extends Component {
        render(){
            return(
                <div>
                    안녕하세요! 제 이름은 <b>{this.props.name}</b>입니다.
                </div>                          // 자신이 받아온 props는 this. 키워드를 통해 조회할 수 있다. 
            );
        }
    }
    export default Myname;

    위는 자식 컨퍼넌트이며 props는 부모 컨퍼넌트에서 설정해준다

    <부모 컨퍼넌트의 정의>
    import Myname from './Myname';

    class App extends Component{
        render(){
            return(
                <Myname name="리액트"/>  // name이 여기선 props다.
            );
        }
    }

    가끔 실수로 props를 빼먹거나 특정 상황에서는 props를 일부러 비워야 할 때가 있는데
    그러한 경우에 props의 기본값을 설정해줄 수 있는데 그것이 바로 defaultProps 입니다.

    import React, {Component} from 'react';
    
    class Myname extends Component {
        static defaultProps ={
            name :'기본이름'
        }
        render(){
            return(
                <div>
                    안녕하세요 ! 제 이름은 <b>{this.props.name}</b>입니다.
                </div>
            );
        }
    }

    // 함수형 컨포넌트에서는 이런식으로 정의해주면 된다.  
    Myname.defaultProps ={ 
        name : '기본이름'
    };

    export default Myname;

04. 함수형 컨포넌트 
    함수형 컨포넌트의 주요 차이점은 state와 LifeCycle이 빠져있어서
    미세하게 함수형 컨포넌트가 클래스형 컨포넌트보다 빠르다
    
    import React from 'react';

    const Myname = ({name}) =>{
        return(
            <div>
                안녕하세요! 제 이름은 {name}입니다. 
            </div>
        )
    }

    export default Myname;

    *함수형 컨포넌트에서 props를 자식에게 전달할때 다른 방법도 있다. 
    props는 객체이고 객체에 담기는 프로퍼티들은 부모 컨포넌트가 자식에게 전달하는 아규먼트에 담기는 값들이다.
    예를 들어, 부모 컨포넌트가 
    <Food 
        fav="kimchi"
        papapap=["hamburger",1,2,3,4]
        name ={true}
    />
    이런식으로 props를 전달하면 
    props 객체는 이런식으로 구성된다
    props {
        fav="kimchi"
        papapap=["hamburger",1,2,3,4]
        name ={true}
    }
    따라서 자식 컨포넌트는 객체에 접근하는 연산자인 .연산자를 통해 함수형 컨포넌트에서 props에 접근할 수 있다

    e.g
    import React from 'react';

    function Food(props){   // props라는 객체를 받아오고 (부모 컨포넌트로 부터)
        return(
            <h1>
                I like {props.fav} // props 객체에서 fav 속성에 접근
            </h1>
        )
    }

    다른 방법으로는 

    function Food({fav}){
        return(
            <h1>
                I like {fav}
            </h1>
        )
    }

    function Appp(){
        return(
            <div>
                <Food 
                    fav="kimchi"
                />
            </div>
        )
    }

    --------------------------------------------

    props 정리 

    01. class 형태 
        import React, {Component} from 'react';

        class Name extends Component{
            render(){
                return(
                    ...
                    // props를 가져올려면
                    {this.props.property}
                );
            }
        }

        export default Name;

    02. function 형태 
        import React from 'react';
        
        function Name(/*{property}*/){
            return(
                ...
                // props를 가져올려면 
                {property}
            );
        }

        export default Name;

        

* . map 
    map은 array의 각 item에서 function을 실행하는 
    array를 가지는 javascript function이며,
    그 function의 result를 갖는 array를 반환한다. 
    

05. state 
    동적인 데이터를 다룰때에는 바로 state를 사용한다. 

    e.g
    
    import React, {Component} from 'react';

    class Counter extends Component{
        // class field 
        state={
            number:0
        }

        handleIncrease=()=>{ // custom method 
            this.setState({  // component의 내장함수 
                number : this.state.number+1
            });
        }

        handleDecrease=()=>{
            this.setState({
                number : this.state.number-1
            });
        }

        render(){
            return(
                <div>
                    <h1>카운터</h1>
                    <div> 값 : {this.state.number}</div>
                    <button onClick ={this.handleIncrease}>+</button>
                    <button onClick ={this.handleDecrease}>-</button>
                </div>
            );
        }
    }

    export default Counter;

    state의 정의 
    컨포넌트의 state를 정의할 때는 class field 문법을 사용해서 정의한다. 

    state = {
        number : 0
    }

    만약 class field를 사용하지 않는다면 

    constructor(props){
        super(props);
        this.props = {
            number : 0
        }
    }

    리액트 중간 점검 및 느낀점 ? 
    
    공부 시작한지 이틀 째여서 그런 거이길 비는데 조금 난해한 점이 많이 있다
    내 생각엔 ES6 에서 class 와 this 개념이 제대로 잡히질 않아서 그런 것 같다. 
    props 공부할 때까지만 해도 막히는 건 없었는데 
    state 공부 시작하면서 답답함이 시작됐고 class 표현식이라던가 this. 사용이 난무하면서 조금 난해해졌다. 
    지금은 react 공부를 잠시 멈추고 class 공부를 다시 하고 와야 할 필요성을 느꼈다. 
    
    virtual dom을 수정함으로 써 랜딩이 느린 real Dom에 html을 푸쉬한다는 react의 발상은 놀랍도록 참신하고 
    이를 현실로 가능하게 만든 개발자들이 진짜 대단하다고 생각했다. 단순히 라이브러리들을 저장하고 나열해 놓는 프레임워크가 아닌.
    virtual Dom 이라는 가상 현실을 만듬으로써, 복잡한 코드들을 component 화 해서 유지보수성을 높이고 랜딩 속도도 높여줬다. 
    react 안을 구성하는 대부분은 js 문법이라 react 공부를 하는게 새로운 공부를 한다기보단 내가 알고 있는 js 기술을 새로운 프레임워크에 적용하는 기분이라 
    새로운 언어를 배우는 느낌과는 전혀 달랐다. (class 문법은 조금 낯설었지만...)

    2020년 새해가 되면 조금 더 발전한 개발자가 되어있길 바라면서 
    새로운 걸 배우고 아는 걸 익히러 노트북을 킨다

00. Array

    배열 내장 함수들에 대해 알아보자 
    01. forEach 메서드는 주어진 함수를 배열 요소 각각에 대해 실행합니다.

        문법 : arr.forEach(callback(currenValue,index,arr){
                ...
               },thisArg)
        반환 값 : undefined

        const superHeros = ['아이언맨','캡틴 아메리카','토르'];
        superHeros.forEach(hero =>{
            console.log(hero);
        }) // '아이언맨' '캡틴 아메리카' '토르' 

        forEach 함수의 파라미터로는 , 각 원소에 대하여 처리하고 싶은 코드를 함수로
        넣어줍니다. 여기서 hero는 각 원소를 나타내게 됩니다. 
        이렇게 함수형태의 파라미터를 전달하는 것을 콜백함수라고 부릅니다. 

    02. indexOf : 파라미터가 몇번째 인덱스에 위치하는지 알아내는 메서드 
        
        문법 : array.indexOf(findElement, fromIndex) -> fromIndex 미 지정시 디폴트는 0
        반환 값 : findElement 가 있는 index 

        const index = superHeros.indexOf('토르')
        console.log(index); // 2 

    03. map :
        map은 배열 안의 각 원소를 변환 할 때 사용되며, 이 과정에서 새로운 배열이 만들어 집니다.
        
        문법 : forEach와 동일 
        반환 : 콜백함수가 적용된 새로운 배열이 반화된다. 

        e.g
        const array=[1,2,3,4,5,6,7];
        const squared =[];

        1) for문 
        for(let i=0; i<array.length; i++){
            squared.push(array[i]*array[i]);
        }
        console.log(squared);

        2) forEach
        array.forEach(n=>{
            squared.push(n*n);
        })

        3) map 
        const square = n=>{
            return n*n;
        }
        const squared = array.map(square);

    04. findIndex 

        문법 : array.findIndex(function funcName(Current){
                    return Current.props === findValue;
               })
        반환 값 : 찾고자하는 값을 갖고 있는 배열의 원소의 index값을 반환

        만약에 배열 안에 있는 값이 숫자, 문자열, 또는 불리언이라면 찾고자하는 항목이 
        몇번째 원소인지 알아내려면 indexOf를 사용하면 되지만, 
        배열 안에 있는 값이 객체이거나, 배열이라면 indexOf로 찾을 수 없습니다. 
        const todos = [
            {
                id : 1,
                text : '자바스크립트 입문',
                done : true
            },
            {
                id : 2,
                text : '함수 배우기',
                done : true 
            },
            {
                id : 3,
                text : '객체와 배열 배우기',
                done : true 
            },
            {
                id : 4,
                text : '배열 내장함수 배우기',
                done : false 
            }
        ]
        const index = todos.findIndex(todo=>todo.id===3);
        // todo는 todos 배열의 각 원소들 (객체들)이다. 
        console.log(index);

    05. find 
        find 함수는 findIndex랑 비슷한데, 찾아낸 값이 몇번재인지 알아내는 것이 아니라, 
        찾아낸 값 자체를 반환합니다. 
        
        문법 : findIndex와 동일 
        반환 값 : 찾아낸 배열의 원소 
       
    **. 화살표 함수 배우기 

        function name(argument){
            ...
        }
        --> 
        const name=(arguemet)=>{

        }

        익명함수의 경우 
        const (arguemet)=>{

        }
        argument가 1개인 경우 화살표 함수에서는 argument를 괄호로 안 묶어주어도 된다
        const argument =>{}

        return 만 해야하고 그게 한 줄짜리라면 
        const argument => something 

    06. filter 
        filter 함수는 배열에서 특정 조건을 만족하는 값들만 따로 추출하여 새로운 배열을 만듭니다.
        
        문법 : findIndex, find 와 동일 
        반환 값 : 필터링 된 배열 
        
        find는 발견하는 즉시 그 배열의 원소를 찾는다면
        filter는 발견해도 원래 배열의 끝까지 순회를 한 뒤 일치하는 배열의 원소들을 모두 하나의 배열로 반환한다. 

