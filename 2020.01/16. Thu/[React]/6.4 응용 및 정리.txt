초기 상태 설정하기 -> 데이터 추가 기능 구현하기 -> 데이터 삭제 기능 구현하기 

import React, { useState } from "react";

const IterationSample = () => {
  const [names, setNames] = useState([
    { id: 1, text: "첫번째" },
    { id: 2, text: "두번째" },
    { id: 3, text: "세번째" }
  ]);
  const [inputText, setInputText] = useState("");
  const [nextId, setNextId] = useState(4);

  const onChange = e => {
    setInputText(e.target.value);
  };

  const onKeyPress = e => {
    if (e.key === "Enter") {
      onClick();
      e.target.value = "";
    }
  };
  const onClick = () => {
    const newnames = names.concat({ id: nextId, text: inputText });

    setNextId(nextId + 1);
    setNames(newnames);
    setInputText("");
  };

  const onRemove = id => {
    const nextnames = names.filter(name => name.id !== id);
    setNames(nextnames);
  };

  const namesList = names.map(name => (
    <li key={name.id} onDoubleClick={() => onRemove(name.id)}>
      {name.text}
    </li>
  ));
  return (
    <div>
      <input onChange={onChange} onKeyPress={onKeyPress}></input>
      <button onClick={onClick}>추가</button>
      <ul>{namesList}</ul>
    </div>
  );
};

export default IterationSample;


정리 

컴포넌트 배열을 렌더링할 때는 key값 설정에 유의해야 합니다 
또 key 값은 언제나 유일해야 합니다. 
상태 안에서 배열을 변형할 때는 배열에 직접 접근하여 수정하는 것이 아니라 
concat , filter 등의 배열 내장 함수를 사용하여 새로운 배열을 만든 후 이를 새로운 상태로 설정해 주어야 한다는 점을 명심하세요 

