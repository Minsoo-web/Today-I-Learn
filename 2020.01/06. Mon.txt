React 공부 
https://velopert.com/3636

리액트 프로젝트에서 배열을 다루는 방법 
리액트에서는 state 내부이 값을 직접적으로 수정하면 절대 안 됩니다. 
이를 불변성 유지라고 하는데요. push, splice, unshift, pop같은 내장함수들은
배열 자체를 직접 수정하게 되므로 적합하지 않습니다. 

그 대신에 기존의 배열에 기반하여 새 배열을 만들어내는 함수인 
concat, slice, map, filter 같은 함수를 사용해야 합니다. 

리액트에서 불변성 유지가 중요한 이유는 불변성을 유지해야 리액트에서 모든 것들이 필요한 상황에
리랜더링 되도록 설계할 수 있고, 그렇게 해야 나중에 성능도 최적화 할 수 있기 때문입니다. 


< 데이터 추가 >
state = [
    {
        ...
    } // 기본 state 베열 
]

handleCreate = (data) => {
    const { information} = this.state;
    this.setState({
        information = information.concat({
            id:this.id++,
            ...data
        })
    })
}

    * [JS] ... (Three Dots) Operator
        https://sovovy.tistory.com/34
    ES6에서 추가된 문법 

    1. Rset Operator
        객체 혹은 배열의 남은 값을 변수에 할당할 때
        const obj = { a: 1, b:2, c:3, d:4 ,e:5};
        const {a,b,...restObj}=obj;
        // a와 b를 제외한 나머지 값들이 restObj에 객체로 할당된다.
        // restObj = {
            c:3,
            d:4,
            e:5
        } 

    2. spread Operator 
        객체 혹은 배열의 값을 합칠 때, 혹은 복사할 때 
        모든 값들만 꺼내서 사용할 때

        const arr=[1,2,3];

        const arryCopy =[...arr, ...arr]

        객체, 배열의 값들을 parameter로 대응해서 넘길 때 
        function foo(num1,num2,num3,num4){
            console.log(num1,num2,num3,num4);
        }

        foo(arryCopy) // 1,2,3,1,2,3
        foo(...arryCopy) //1,2,3,1


< 데이터 렌더링 > 
생성한 배열을 컴포턴트로 변환해 주겠습니다. 

우리는 두 개의 컴포넌트를 만들겠습니다. 
 o PhoneInfo : 각 전화번호 정보를 보여주는 컴포넌트입니다. 
 o PhoneInfoList : 여러개의 PhoneInfo 컴포넌트들을 보여줍니다. 

key 라는 값도 설정이 되었는데요, 
여기서 key는 리액트에서 배열을 렌더링 할 때 꼭 필요한 값입니다. 
리액트에서 배열을 렌더링 할 때 값을 통하여 업데이트 성능을 최적화 합니다. 

만약에 key를 부여하지 않으면, 배열의 index값이 자동으로 key로 설정이 되는데 
값을 추가하게 될 경우 추가된 이후의 배열의 index도 다 바꾸어 주어야 하는 비효율 성이 생겨버림

<데이터 제거>
기존의 배열 데이터를 건들이지 않으면서 데이터를 제거하기 위해선, 여러가지 방법이 있을 수 있습니다. 

        자바스크립트 배열로 연습을 헤보겠습니다. 

        const arr =[1,2,3,4,5]

        배열에서 3을 제거하는 방법

        1. slice와 concat을 이용하는 방법 

            arr.slice(0,2).concat(arr.slice(3,5)) // [1,2,4,5]

            배열 연산자를 사용할 경우 
            [...arr.slice(0,2),...arr.slice(3,5)];

        2. filter라는 내장함수 이용하기 

            arr.filter(num => num!==3);

    id를 파라미터로 받아오는 handleRemove라는 함수를 만드시고, PhoneInfoList로 전달하세요 

    handleRemove = (id) => { 
        const {information} = this.state;
        this.setState({
            information : information.filter(info => info.id !== id);
        })
    }

    <PhoneInfoList
        data ={information}
        onRemove = {this.handleRemove}
    />

데이터 수정 
수정할때에도 마찬가지로 불변성을 지켜줘야합니다. 
기존의 배열과, 그 내부에 있는 객체를 절대로 직접적으로 수정하면 안 됩니다. 

    const array =[
        {id:0,text:'hello',tag :'a'},
        {id:1,text:'wordl',tag:'b'}.
        {id:2,text:'bye',tag:'c'}
    ];
    기존의 값을 건들이지 않고 id가 1인 객체의 text 값을 Korea라는 값으로 
    바꾼 새로운 배열을 만들어보겠습니다. 

    const modifiedArray = array.map(item => item.id=== 1 
        ? ({...item, text : 'korea'}) : item
    )

데이터 필터링 구현하기 

우선, 불변성의 중요성을 알아보는 과정에서 이름으로 전화번호를 찾는 데이터 필터링 기능을 구현해보겠습니다. 

먼저 App 컴포넌트에서 input 하나를 렌더링하고 해당 input 의 값을 state의 keyword라는 값에 담겠습니다. 
이를 위해 이벤트 핸들러도 만들어 줘야겠죠? ..ㅠ 넹


정리를 하며

정리 및 요약 
    1. 재사용 가능한 컴포넌트를 만듭니다. 
    2. props는 부모에게서 전달 받는 값입니다. 
    3. state는 자기 자신이 가지고 있는 데이터입니다. 
    4. props 나 state가 바뀌면 컴포넌트는 리렌더링 합니다. 
    5. LifeCycle API를 통해서 컴포넌트 마운트 , 업데이트, 언마운트 전 후로 처리할 로직을 
       설정하거나 리렌더링을 막아줄 수 있습니다. 

