useReducer는 useState 보다 더 다양한 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 업데이트 해주고 싶을 때 사용하는 값입니다. 

리듀서는 현재 상태, 그리고 업데이트를 위해 필요한 정보를 담은 액션 값을 전달 받아 새로운 상태를 반환하는 함수입니다. 
리듀서 함수에서 새로운 상태를 만들어줄 때는 반드시 불변성을 지켜주어야 합니다. 

function reducer(state,action){
    return {...}; // 불변성을 지키면서 업데이트한 새로운 상태를 반환합니다. 
}

액션 값은 주로 다음과 같은 형태로 이루어집니다. 

{
    type : 'INCREMENT',
    // 다른 값이 더 필요하다면 추가로 들어감 
}

8.3.1 카운터 구현하기 

action.type 값에 따라 다른 수행을 하고 싶으면 switch 문을 쓰면 된다 

function reducer(state,action){
    switch(action.type){
        case 'asdasd' : 
            return .... ; 
        case ' asdasdasd' : 
            return ,,, 
        default : 
            return dasdasd ; 
    }
}

const [state, dispatch] = useReducer(reducer,{value:0}); // value는 state 값중 하나 (state.value로 접근)

onCLick={()=>{
    dispatch({type:'asdasd'})
}}

useReducer의 첫번째 파라미터에는 리듀서 함수를 넣고 
useReducer(reducer,{})
두번째 파라미터에는 해당 리듀서의 기본 값을 넣어줍니다
useReducer(reducer,{value : 0})

이 Hook을 사용하면 state값과 dispatch 함수를 받아오는데요 
state는 현재 가리키고 있는 상태이고 dispatch는 액션을 불러오는 함수입니다. 
함수안에 파라미터로 액션값을 넣어주면 리듀서 함수가 호출되는 구조입니다. 

useReduce 를 사용했을 때 가장 큰 장점은 컴포넌트 업데이트 로직을 컴포넌트 바깥으로 빼낼 수 있다는 점입니다. 

8.3.2 인풋상태 관리하기 

기존에는 인풋이 여러개여서 useState를 여러 번 사용했다면 
useReducer에서는 기존에 클래스 형에서 input 태그에 name 값을 할당하고 e.target.name을 참조하여 setState를 해준 것과 유사한 방식으로 처리 해 줄 수 있습니다. 

useReducer에서 액선은 그 어떤 값으로도 사용할 수 있습니다. 
그래서 이번에는 이벤트 객체가 지니고 있는 e.target 값 자체를 액션으로 사용했습니다. 
이런 식으로 인풋을 관리하면 아무리 인풋의 개수가 많아져도 코드를 짧고 깔끔하게 유지할 수 있습니다. 


