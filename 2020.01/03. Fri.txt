<React> 

01. proptypes 
    우리가 기대한 props가 제대로 전달이 되었는지 아닌지 확인할 수 있는 기법이다. 

    설치 방법 및 자세한 설명 
    노마드 코더 유튜브 : 
    https://www.youtube.com/watch?v=JZhSIj8hgLE&list=PL7jH19IHhOLPp990qs8MbSsUlzKcTKuCf&index=12

    우리의 컴포넌트가 제대로 된 props를 받았는지 아닌지 확인하기 위해선 기대 값들을 써주어야 한다. 

    ComponentName.proptypes ={
        props1 : Proptypes.datatype.isRequired,
        props2 : Proptypes.datatype.isRequired,
        props3 : Proptypes.datatype.isRequired
    }

    만약 기대한 props가 안 온다면 콘솔창에서 오류 메세지를 띄워준다. 
    1. datatype
       string이 와야하는데 number가 온다던지의 경우 

    2. isRequired 
       없는 경우 
       예를들어 isRequired가 작성되어 있지 않는 경우에는 
       datatype이거나 또는 undefine

    구글에 proptypes React라고 검색하면 더 자세한 사용방법과 다양한 기능들을 알아 볼 수 있다. 

02. class 형태를 공부해야 하는 이유는 state 때문이고 
    state는 객체이고 component의 data를 넣을 공간이 있고 
    이 데이터는 변한다. 

    this.state.count = 1; 
    이런식으로 직접 state를 변경하면 안 되고 
    setState()를 사용해야 한다. 

    만약 setState를 사용하지 않으면 새 state와 함께 render function이 호출되지 않는다. 

    setState({
        stateName : stateName + 1; 
    })
    이런식으로 호출하게 되면 
    setState는 stateName이 state인지 아닌지 몰라서 
    정의되지 않은 애가 호출되었다고 오류를 보내줘 

    그래서 해결할 수 있는 방법이 두 가지인데 하나는 미리 선언을 하는 방식이고 
    다른 하나는 대입과 동시에 선언하는거야 

    1)
        const {stateName} = this.state;
        this.setState({
            count : count + 1; 
        })

    2) 
        this.setState({
            stateName : this.state.stateName +1;
        })


    여기서 더 발전해서 state를 set할 때, react에서 외부의 상태에 의존하지 않는 가장 좋은 방법은 
    함수를 이용하는건데 바로 예제로 보자 

    this.setState(
        current=>({
            count:current.count+1
        })
    );

    가장 중요한 것은 
    내가 setState를 호출할 때마다 react는 새로운 state와 함께 render function을 호출한다. 
        또한 setState를 사용할 때 state 안에 default 값들을 선언할 필요는 없다. 
        미래에 사용될 state여도 상관 없다. (이는 좋은 습관이라고 함)

03. LifeCycle 

    react component에서 사용하는 유일한 function은 
    render function이다. 

    하지만 react component가 갖고 있는 메서드는 render 말고도 많다. 

    이들은 LifeCycle 메서드를 가지는데 이는 기본적으로 react가 component를 생성하는 그리고 없애는 방법론이다. 

    01. Mounting 
    Mounting은 태어나는 것과 같다.
    
        o constructor()
        () static getDerivedStateFromProps()
        o render()
        o componentDidMount()

        constructor는 리액트 함수가 아닌 class의 함수다 
        render함수보다 먼저 호출 된다. 
        rendering이 된 후에 componentDidMount가 호출된다. 

        setState를 호출하면, component를 호출하고, 
        먼저 render를 호출한 다음 업데이트가 완됴되었다고 말하면
        componentDidUpdating이 실행이 된다. 

    02. Updating 

        o render()
        o componentDidUpdating()

    03. Unmounting 
    컴포넌트가 죽는걸 의미 => 언제? 페이지가 바뀔 때 
    state를 사용해서 component를 교체하기도 하고 다양한 방법으로 component는 죽는다. 


04. data fetching 






    






