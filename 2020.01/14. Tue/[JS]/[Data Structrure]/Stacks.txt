참고 문헌 
https://gmlwjd9405.github.io/2018/08/03/data-structure-stack.html
youtube
https://www.youtube.com/watch?v=t2CEgPsws3U&t=25s

스택의 개념 
한 쪽 끝에서만 자료를 넣고 뺄 수 있는 (선형 : linear)
Last In First Out (LIFO) 형식의 자료 구조 

스택의 연산 
스택은 가장 최근에 스택에 추가한 항목이 가장 먼저 제거될 항목이다. 

    pop : 스택에서 가장 위에 있는 항목을 제거한다.
    push(item) : item 하나를 가장 윗 부분에 추가한다. 
    peek() : 스택의 가장 위에 있는 항목을 조회(반환)한다. 
    isEmpty() : 스택이 비어있을 때 true를 반환한다. 

스택의 사용 사례 
재귀 알고리즘을 사용하는 경우 스택이 유용하다 
    재귀 알고리즘 
        재귀적으로 함수를 호출해야 하는 경우에 임시 데이터를 스택에 넣어준다
        재귀함수를 빠져 나와 퇴각 검색(backtrack)을 할 때는 스택에 넣어 두었던 임시 데이터를 빼 줘야 한다.
        스택은 이런 일련의 행위를 가능하게 해준다. 
        또한 스택은 재귀 알고리즘을 반복적 형태(iterative)를 통해서 구현할 수 있게 해준다.

    웹 브라우저 방문기록(뒤로가기)
    실행 취소(undo)
    역순 문자열 만들기 
    
스택은 서로 관계가 있는 여러 작업을 연달아 수행하면서 이전의 작업을 저장해 둘 필요가 있을 때 널리 사용됩니다. 


<스택 구현 예제>
class Stack {
  constructor() {
    this._arr = [];
  }
  push(item) {
    this._arr.push(item);
  }
  pop() {
    console.log(this._arr.pop());
  }
  peek() {
    console.log(this._arr[this._arr.length - 1]);
  }
}

const stack = new Stack();
stack.push(1);
stack.push(2);
stack.push(3);
stack.push(4);

stack.pop(); // 4
stack.pop(); // 3
stack.peek(); // 2
stack.pop(); // 2 